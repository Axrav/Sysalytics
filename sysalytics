#!/usr/bin/env python3
'''
Python script for Sysalytics.
This script pulls the following statistics.
- Battery percentage
- Is charging
- Governor
- CPU frequency
- Swappiness
'''
import firebase_admin
from firebase_admin import db
import json

# Write to a node
def write_to_node(node, value):
    with open(node, 'w') as f:
        f.write(str(value))

# Read a node and return the value
def read_node(node):
    with open(node, 'r') as f:
        return f.read().strip()

def write_json(data):
    with open('data.json', 'w') as f:
        f.write(json.dumps(data))

# Swappiness
SWAPPINESS = read_node("/proc/sys/vm/swappiness")
NODE_SWAPPINESS = "/proc/sys/vm/swappiness"

# Battery
BATTERY_STATUS = read_node("/sys/class/power_supply/BAT0/status")
BATTERY_CAPACITY = read_node("/sys/class/power_supply/BAT0/capacity")
BATTERY_MODEL = read_node("/sys/class/power_supply/BAT0/model_name")

# No. of CPUs in the system
NODE_NUM_CPUS = "/sys/devices/system/cpu/online"
num_cpus = int(list(read_node(NODE_NUM_CPUS))[2]) + 1

# CPU frequencies and governors
NODE_CPU_CUR_FREQ = []
NODE_CPU_MAX_FREQ = []
NODE_CPU_MIN_FREQ = []
NODE_CPU_AVL_SGOV = []
NODE_CPU_CUR_SGOV = []
for i in range(num_cpus):
    NODE_CPU_CUR_FREQ.append("/sys/devices/system/cpu/cpu" + str(i) + "/cpufreq/scaling_cur_freq")
    NODE_CPU_MAX_FREQ.append("/sys/devices/system/cpu/cpu" + str(i) + "/cpufreq/scaling_max_freq")
    NODE_CPU_MIN_FREQ.append("/sys/devices/system/cpu/cpu" + str(i) + "/cpufreq/scaling_min_freq")
    NODE_CPU_AVL_SGOV.append("/sys/devices/system/cpu/cpu" + str(i) + "/cpufreq/scaling_available_governors")
    NODE_CPU_CUR_SGOV.append("/sys/devices/system/cpu/cpu" + str(i) + "/cpufreq/scaling_governor")

CPU_CUR_FREQ = []
CPU_MAX_FREQ = []
CPU_MIN_FREQ = []
CPU_AVL_SGOV = []
CPU_CUR_SGOV = []

for i in range(num_cpus):
    CPU_CUR_FREQ.append(read_node(NODE_CPU_CUR_FREQ[i]))
    CPU_MAX_FREQ.append(read_node(NODE_CPU_MAX_FREQ[i]))
    CPU_MIN_FREQ.append(read_node(NODE_CPU_MIN_FREQ[i]))
    CPU_AVL_SGOV.append(read_node(NODE_CPU_AVL_SGOV[i]))
    CPU_CUR_SGOV.append(read_node(NODE_CPU_CUR_SGOV[i]))

# Parse environment variables the easy way
envVars = []
with open('.env', 'r') as f:
    envVars = f.read().splitlines()

# Initialize Realtime Database
databaseURL = envVars[0]
cred = firebase_admin.credentials.Certificate(envVars[1])

default_app = firebase_admin.initialize_app(
    cred,
    {"databaseURL": databaseURL}
)

# Set db reference to root
dbRef = db.reference('/')

# Read all data, write to JSON
data = {
    "battery": {
        "status": BATTERY_STATUS,
        "capacity": BATTERY_CAPACITY,
        "model": BATTERY_MODEL
    },
    "cpu_num_cpus": num_cpus,
    "cpu_cur_freq": CPU_CUR_FREQ,
    "cpu_max_freq": CPU_MAX_FREQ,
    "cpu_min_freq": CPU_MIN_FREQ,
    "cpu_scal_gov": CPU_CUR_SGOV,
    "cpu_avl_sgov": CPU_AVL_SGOV,
    "swappiness": SWAPPINESS
}

# Write to JSON
dbRef.set(data)